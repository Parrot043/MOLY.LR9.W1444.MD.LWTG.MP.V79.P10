#ifndef __INC_IPC_TRACE_H
#define __INC_IPC_TRACE_H

#if HIF_CONSOLE_TRACE_ENABLED != 1

#ifndef GEN_FOR_PC
 #include "kal_public_defs.h"
#endif /* GEN_FOR_PC */

#include "dhl_trace.h"
#include "dhl_def.h"

#if !defined(GEN_FOR_PC)
#if defined(__DHL_MODULE__) || defined(__CUSTOM_RELEASE__)
    #include "ipc_trace_gen.h"
#endif /* TST Trace Defintion */
#endif

#endif /* HIF_CONSOLE_TRACE_ENABLED != 1 */

BEGIN_TRACE_MAP(MOD_IPCORE)
    TRC_MSG(IPC_TR_ILM_WRONG_DEST_MOD, "[IPCORE] ipc_on_ilm(): wrong dest_mod_id(%d)!")
    TRC_MSG(IPC_TR_NETIF_ATTACHING, "[IPCORE] ipc_attach(): module_id(%d), netif_id(%d), callback_context(0x%x), features(0x%x)...")
    TRC_MSG(IPC_TR_NETIF_ATTACHED, "[IPCORE] ipc_new_netif(): module_id(%d), netif_id(%d) has attached successfully")
    TRC_MSG(IPC_TR_NETIF_ATTACH_OUT_OF_SPACE, "[IPCORE] ipc_new_netif(): module_id(%d), netif_id(%d) failed for out of space!")
    TRC_MSG(IPC_TR_NETIF_ATTACH_DUPLICATED, "[IPCORE] ipc_new_netif(): module_id(%d), netif_id(%d) has attached before!")
    TRC_MSG(IPC_TR_NETIF_DETACHING, "[IPCORE] ipc_detach(): handle(0x%x)...")
    TRC_MSG(IPC_TR_NETIF_DETACHED, "[IPCORE] ipc_detach(): module_id(%d), netif_id(%d) has detached successfully")
    TRC_MSG(IPC_TR_NETIF_DETACH_INVALID, "[IPCORE] ipc_del_netif(): invalid netif to detach!")
    TRC_MSG(IPC_TR_RESET_START, "[IPCORE] ipc_reset(): Start to handle IPCore reset")
    TRC_MSG(IPC_TR_GET_QBM_DATAHEAD_ZERO_LENGTH_BD, "[IPCORE] ipc_get_qbm_datahead(): Found non-zero length GPD with all-zero length BD list, this should not happen: gpd(0x%x), gpd_len(%d)")
    TRC_MSG(IPC_TR_DEL_SESSION, "[IPCORE] ipc_reset(): Delete session[0x%x] for idx[%d]")
    TRC_MSG(IPC_TR_DEL_SESSION_INFO, "[IPCORE] ipc_reset(): Delete session information(type[%d], ip_id[%d]) for idx[%d]")
    TRC_MSG(IPC_TR_DEL_NETIF, "[IPCORE] ipc_reset(): Delete netif[0x%x] for idx[%d]")
    TRC_MSG(IPC_TR_RESET_END, "[IPCORE] ipc_reset(): Handle IPCore reset is done")
    TRC_MSG(IPC_TR_SESSION_BINDING_START, "[IPCORE] ipc_on_pdn_bind(): binding request received")
    TRC_MSG(IPC_TR_SESSION_BINDING_INFO, "[IPCORE] ipc_on_pdn_bind(): network_interface_id(0x%X), pdn_id(0x%X), ip_addr_type(%d)...")
    TRC_MSG(IPC_TR_SESSION_BINDING_CFG_IP_INFO, "[IPCORE] ipc_on_pdn_bind(): Configure IP information for network_interface_id(0x%X), pdn_id(0x%X), ip_addr_type(%d):Mapped NMU ip_id(%d)")
    TRC_MSG(IPC_TR_SESSION_BINDING_CFG_IPV6_DNS, "[IPCORE] ipc_on_pdn_bind(): Add IPv6 DNS to NMU ip_id(%d):[%02X] %02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x")
    TRC_MSG(IPC_TR_SESSION_BINDING_CFG_IPV6_DNS_NUM, "[IPCORE] ipc_on_pdn_bind(): Set IPv6 DNS number(%d) to NMU ip_id(%d)")
    TRC_MSG(IPC_TR_SESSION_BINDING_CFG_IPV6_ZERO_IID_LEN, "[IPCORE] ipc_on_pdn_bind(): Set IPv6 IID length of NMU ip_id(%d) to ZERO")
    TRC_MSG(IPC_TR_SESSION_BINDING_CFG_IPV6_IID, "[IPCORE] ipc_on_pdn_bind(): Set IPv6 IID to NMU ip_id(%d):IID length(%d) %02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x")
    TRC_MSG(IPC_TR_SESSION_BINDING_CFG_IPV6_DOWN, "[IPCORE] ipc_on_pdn_bind(): NMU ip_id(%d) - IPv6 DOWN")
    TRC_MSG(IPC_TR_SESSION_BINDING_CFG_IPV6_UP, "[IPCORE] ipc_on_pdn_bind(): NMU ip_id(%d) - IPv6 UP")
    TRC_MSG(IPC_TR_SESSION_BINDING_CFG_IPV4_DNS, "[IPCORE] ipc_on_pdn_bind(): Add IPv4 DNS to NMU ip_id(%d):[%02X] %d.%d.%d.%d")
    TRC_MSG(IPC_TR_SESSION_BINDING_CFG_IPV4_DNS_NUM, "[IPCORE] ipc_on_pdn_bind(): Set IPv4 DNS number(%d) to NMU ip_id(%d)")
    TRC_MSG(IPC_TR_SESSION_BINDING_CFG_IPV4_ADDR, "[IPCORE] ipc_on_pdn_bind(): Set IPv4 address to NMU ip_id(%d): %d.%d.%d.%d")
    TRC_MSG(IPC_TR_SESSION_BINDING_CFG_IPV4_FAKE_INFO, "[IPCORE] ipc_on_pdn_bind(): NMU ip_id(%d) - Trigger IPv4 fake info generation for IPv4 address %d.%d.%d.%d")
    TRC_MSG(IPC_TR_SESSION_BINDING_CFG_IPV4_UP, "[IPCORE] ipc_on_pdn_bind(): NMU ip_id(%d) - IPv4 UP")
    TRC_MSG(IPC_TR_SESSION_BINDING_CFG_IPV4_DOWN, "[IPCORE] ipc_on_pdn_bind(): NMU ip_id(%d) - IPv4 DOWN")
    TRC_MSG(IPC_TR_SESSION_BINDING_DHCP4C, "[IPCORE] ipc_on_pdn_bind(): Enable DHCP4C for netif_id(%d), features(0x%X)")
    TRC_MSG(IPC_TR_SESSION_BIND_SESSION_RLOCK_FAIL, "[IPCORE] ipc_on_pdn_bind(): session readlock is failed for network_card(0x%X), pdn_id(0x%X), ip_type(0x%X)!")
    TRC_MSG(IPC_TR_SESSION_BIND_NEW_SESSION_FAIL, "[IPCORE] ipc_on_pdn_bind(): session allocation is failed for network_card(0x%X), pdn_id(0x%X), ip_type(0x%X)!")
    TRC_MSG(IPC_TR_SESSION_BIND_INVALID_NETIF, "[IPCORE] ipc_on_pdn_bind(): no netif found for network_card(0x%X)!")
    TRC_MSG(IPC_TR_SESSION_BIND_UNSUPPORTED_IP_ADDR_TYPE, "[IPCORE] ipc_on_pdn_bind(): unsupported ip_addr_type(%d)! pdn_id(0x%X)")
    TRC_MSG(IPC_TR_SESSION_BIND_NULL_PARAM, "[IPCORE] ipc_on_pdn_bind(): NULL parameter!")
    TRC_MSG(IPC_TR_SESSION_BIND_START, "[IPCORE] ipc_new_session(): New session - session_context(0x%X), session_type(0x%X), session_state(0x%X).")
    TRC_MSG(IPC_TR_SESSION_BIND_NETIF_BOUND_MIXED, "[IPCORE] ipc_new_session():(IPV4V6) netif(0x%x)/netif_id(%d) has already bound with session (map[v4]=0x%x, map[v6]=0x%x)! session_context(0x%X), session_type(0x%X), session_state(0x%X) bind fail.")
    TRC_MSG(IPC_TR_SESSION_BIND_NETIF_BOUND_SPECIFIC_IP_VER, "[IPCORE] ipc_new_session():(v4_or_v6) netif(0x%x)/netif_id(%d) has already bound with session (map[v4]=0x%x, map[v6]=0x%x)! session_context(0x%X), session_type(0x%X), session_state(0x%X) bind fail.")
    TRC_MSG(IPC_TR_SESSION_BIND_DUPLICATED, "[IPCORE] ipc_new_session(): session_context(0x%X), session_type(0x%X), session_state(0x%X) has already bound!")
    TRC_MSG(IPC_TR_SESSION_BIND_OUT_OF_SPACE, "[IPCORE] ipc_new_session(): session_context(0x%X), session_type(0x%X), session_state(0x%X) failed for out of space!")
    TRC_MSG(IPC_TR_SESSION_BINDING_RESULT, "[IPCORE] ipc_on_pdn_bind(): binding request handling - result(0x%X)")
    TRC_MSG(IPC_TR_SESSION_BINDING_RSP_PARAM_GEN, "[IPCORE] ipc_on_pdn_bind(): Generate binding response parameter - network_interface_id(%d), pdn_id(%d), sizeof(ip_addr_struct)=%d, sizeof(dns_struct)=%d, sizeof(upcm_ipcore_back_info_t)=%d")
    TRC_MSG(IPC_TR_SESSION_BINDING_RSP, "[IPCORE] ipc_on_pdn_bind(): sending response for binding request - result(0x%X), dst_module(0x%X)")
    TRC_MSG(IPC_TR_SESSION_BOUND, "[IPCORE] ipc_new_session(): session_context(0x%X), session_type(0x%X), session_state(0x%X) has bound successfully => ip_id(%d)")
    TRC_MSG(IPC_TR_SESSION_DEACTIVATING, "[IPCORE] ipc_on_pdn_deact(): pdn_id(0x%X)...")
    TRC_MSG(IPC_TR_SESSION_DEACTIVATE_NO_SESSION_FOUND, "[IPCORE] ipc_on_pdn_deact(): no session found for pdn_id(0x%X)!")
    TRC_MSG(IPC_TR_SESSION_DEACTIVATE_NULL_PARAM, "[IPCORE] ipc_on_pdn_deact(): NULL parameter!")
    TRC_MSG(IPC_TR_SESSION_DEACTIVATE_INVALID_SESSION, "[IPCORE] ipc_del_session(): it's not a valid session!")
    TRC_MSG(IPC_TR_SESSION_DEACTIVATED, "[IPCORE] ipc_del_session(): session_context(0x%X), session_type(0x%X), ip_id(%d) has deactivated successfully")
    TRC_MSG(IPC_TR_UPDATE_SESSION_STATE_START, "[IPCORE] ipc_update_session_state(): Update session_context(0x%X) to state(%d) start")
    TRC_MSG(IPC_TR_UPDATE_SESSION_STATE_ORG_AND_NEW, "[IPCORE] ipc_update_session_state(): Session_context(0x%X) session_type(0x%X) of netif_context(0x%X) from org_state(%d) to new_state(%d)")
    TRC_MSG(IPC_TR_UPDATE_SESSION_STATE_TRANSITION_SUCCESS, "[IPCORE] ipc_update_session_state(): Session_context(0x%X) update to state(%d) successfully")
    TRC_MSG(IPC_TR_UPDATE_SESSION_STATE_WRITE_FAIL, "[IPCORE] ipc_update_session_state(): Session_context(0x%X) update to state(%d) fail")
    TRC_MSG(IPC_TR_UPDATE_SESSION_STATE_SST_NA, "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), do nothing else")
    TRC_MSG(IPC_TR_UPDATE_SESSION_STATE_SST_LUI, "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), LinkUpIndication")
    TRC_MSG(IPC_TR_UPDATE_SESSION_STATE_SST_LUR, "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), LinkUpRequest(netif[0x%X], IPType[%d])")
    TRC_MSG(IPC_TR_UPDATE_SESSION_STATE_SST_LDR, "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), LinkDownRequest(netif[0x%X], IPType[%d])")
    TRC_MSG(IPC_TR_UPDATE_SESSION_STATE_SST_IUI, "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), IpUpIndication")
    TRC_MSG(IPC_TR_UPDATE_SESSION_STATE_SST_IUR, "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), IpUpRequestion(netif[0x%X], IPType[%d])")
    TRC_MSG(IPC_TR_UPDATE_SESSION_STATE_SST_IDR, "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), IpDownRequestion(netif[0x%X], IPType[%d])")
    TRC_MSG(IPC_TR_UPDATE_SESSION_STATE_ILLEGAL_TRANSITION, "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), Unknown action(%d)!")
    TRC_MSG(IPC_TR_UPDATE_SESSION_STATE_OUT_OF_RANGE, "[IPCORE] ipc_update_session_state(): Session_context(0x%X), state(%d)->(%d), Illegal transaction!(Min state[%d], Max state[%d])")
    TRC_MSG(IPC_TR_UPDATE_SESSION_STATE_READ_FAIL, "[IPCORE] ipc_update_session_state(): Session_context(0x%X), session state read error !")
    TRC_MSG(IPC_TR_UPDATE_SESSION_STATE_CHK_FAIL, "[IPCORE] ipc_update_session_state(): Session_context(0x%X), session check error !")
    TRC_MSG(IPC_TR_UPDATE_SESSION_STATE_END, "[IPCORE] ipc_update_session_state(): Update session_context(0x%X) to state(%d) end with retval(%d)")
    TRC_MSG(IPC_TR_UL_INVALID_PARAM, "[IPCORE] invalid parameters for uplink handle(0x%X), ior (0x%X)!")
    TRC_MSG(IPC_TR_UL_DROP_FOR_SESSION_DEACT, "[IPCORE] netif_id(%d) drops ior(0x%X) ip_type(%d) uplink packets for session deactivated!")
    TRC_MSG(IPC_TR_UL_DROP_FOR_INVALID_NETIF, "[IPCORE] netif(0x%X) drops uplink packets [ior(0x%X)] for invalid netif!")
    TRC_MSG(IPC_TR_UL_DROP_FOR_INVALID_IOR, "[IPCORE] netif_id(%d) drops uplink packets for invalid ior(0x%X) first_gpd(0x%X) last_gpd(0x%X)!")
    TRC_MSG(IPC_TR_DL_DROP_FOR_NETIF_INFO_LOCK_FAIL, "[IPCORE] pdn_id(%d) ip_id(%d) drops type(%d) [p_head(0x%X), p_tail(0x%X)] downlink packets : netif detach found during getting netif information!")
    TRC_MSG(IPC_TR_DL_DROP_FOR_NETIF_DETACH, "[IPCORE] pdn_id(%d) ip_id(%d) drops type(%d) [p_head(0x%X), p_tail(0x%X)] downlink packets for netif detached!")
    TRC_MSG(IPC_TR_DL_DROP_FOR_INVALID_SESSION, "[IPCORE] pdn_id(%d) drops downlink packets [p_head(0x%X), p_tail(0x%X)] for invalid session!")
    TRC_MSG(IPC_TR_NOTIFY_LINK_CHANGE_BEGIN, "[IPCORE] ipc_notify_link_change(): Link change notification start: netif_id(%d) ip_type(%d) link_update(%d) is_up(%d)")
    TRC_MSG(IPC_TR_NOTIFY_LINK_CHANGE_FOR_NETIF_BEGIN, "[IPCORE] ipc_notify_link_change(): Link change for found netif(0x%x) for netif_id(%d) start")
    TRC_MSG(IPC_TR_NOTIFY_LINK_CHANGE_FOR_NETIF_END, "[IPCORE] ipc_notify_link_change(): Link change for found netif(0x%x) for netif_id(%d) done")
    TRC_MSG(IPC_TR_NOTIFY_LINK_CHANGE_UNKNOWN_NETIF, "[IPCORE] ipc_notify_link_change(): Unknown netif_id(%d)")
    TRC_MSG(IPC_TR_NOTIFY_LINK_CHANGE_END, "[IPCORE] ipc_notify_link_change(): Link change notification done: netif_id(%d) ip_type(%d) link_update(%d) is_up(%d)")
    TRC_MSG(IPC_TR_REG_UL_FILTER_CBK_BEGIN, "[IPCORE] ipc_register_ul_filter_cbk(): rules(0x%X) callback_func(0x%X) callback_context(0x%X)")
    TRC_MSG(IPC_TR_REG_DL_FILTER_CBK_BEGIN, "[IPCORE] ipc_register_dl_filter_cbk(): rules(0x%X) callback_func(0x%X) callback_context(0x%X)")
    TRC_MSG(IPC_TR_REG_UL_FILTER_MSG_BEGIN, "[IPCORE] ipc_register_ul_filter_msg(): rules(0x%X) callback_module(0x%X) callback_context(0x%X)")
    TRC_MSG(IPC_TR_REG_DL_FILTER_MSG_BEGIN, "[IPCORE] ipc_register_dl_filter_msg(): rules(0x%X) callback_module(0x%X) callback_context(0x%X)")
    TRC_MSG(IPC_TR_REG_UL_FILTER_WITH_INFO_CBK_BEGIN, "[IPCORE] ipc_register_ul_filter_with_info_cbk(): rules(0x%X) callback_func(0x%X) callback_context(0x%X)")
    TRC_MSG(IPC_TR_REG_DL_FILTER_WITH_INFO_CBK_BEGIN, "[IPCORE] ipc_register_dl_filter_with_info_cbk(): rules(0x%X) callback_func(0x%X) callback_context(0x%X)")
    TRC_MSG(IPC_TR_REG_UL_FILTER_WITH_INFO_MSG_BEGIN, "[IPCORE] ipc_register_ul_filter_with_info_msg(): rules(0x%X) callback_module(0x%X) callback_context(0x%X)")
    TRC_MSG(IPC_TR_REG_DL_FILTER_WITH_INFO_MSG_BEGIN, "[IPCORE] ipc_register_dl_filter_with_info_msg(): rules(0x%X) callback_module(0x%X) callback_context(0x%X)")
    TRC_MSG(IPC_TR_DEREG_UL_FILTER_BEGIN, "[IPCORE] ipc_deregister_ul_filter(): filter_id(%d)")
    TRC_MSG(IPC_TR_DEREG_DL_FILTER_BEGIN, "[IPCORE] ipc_deregister_dl_filter(): filter_id(%d)")
    TRC_MSG(IPC_TR_INVALID_RULES_ZERO_VALID_FIELD, "[IPCORE] ipc_validate_rules(): valid_fields cannot be 0!")
    TRC_MSG(IPC_TR_INVALID_RULES_FOR_UL, "[IPCORE] ipc_validate_rules(): uplink(%d), valid_fields(0x%X) and ip_type(%d) are invalid for uplink filter!")
    TRC_MSG(IPC_TR_INVALID_RULES_FOR_DL, "[IPCORE] ipc_validate_rules(): uplink(%d), valid_fields(0x%X) and ip_type(%d) are invalid for downlink filter!")
    TRC_MSG(IPC_TR_INVALID_RULES_FOR_IPV4, "[IPCORE] ipc_validate_rules(): uplink(%d), valid_fields(0x%X) and ip_type(%d) are invalid for IPv4 or MIXED type!")
    TRC_MSG(IPC_TR_INVALID_RULES_FOR_IPV6, "[IPCORE] ipc_validate_rules(): uplink(%d), valid_fields(0x%X) and ip_type(%d) are invalid for IPv6 or MIXED type!")
    TRC_MSG(IPC_TR_INVALID_RULES_FOR_UNSUPPORTED_PROTOCOL, "[IPCORE] ipc_validate_rules(): unsupported protocol(%d)!")
    TRC_MSG(IPC_TR_NEW_FILTER_INVALID_PARAMS, "[IPCORE] ipc_new_filter(): failed with invalid parameters: rules(0x%X), callback_func(0x%X), module_id(0x%X)")
    TRC_MSG(IPC_TR_NEW_FILTER_UNAVAILABLE, "[IPCORE] ipc_new_filter(): failed with all filters are busy now!")
    TRC_MSG(IPC_TR_REGISTER_FILTER_VALIDATE_FAIL, "[IPCORE] ipc_register_filter(): filter rule validate fail: uplink?(%d)")
    TRC_MSG(IPC_TR_REGISTER_FILTER_OK, "[IPCORE] ipc_register_filter(): created a new filter successfully: uplink?(%d), filter_id(%d), features(0x%X), ip_type(%d) valid_fields(0x%X), with_ipv4(%d), with_ipv6(%d)")
    TRC_MSG(IPC_TR_REGISTER_FILTER_NG, "[IPCORE] ipc_register_filter(): failed to create a new filter!")
    TRC_MSG(IPC_TR_REGISTER_FILTER_ADD_TO_LIST, "[IPCORE] ipc_register_filter(): add filter_id(%d) to IPv%d filter list. uplink?(%d)")
    TRC_MSG(IPC_TR_DEL_FILTER_INVALID_OBJECT, "[IPCORE] ipc_del_filter(): filter (0x%x) an invalid object!")
    TRC_MSG(IPC_TR_DEREGISTER_FILTER_WITH_INVALID_ID, "[IPCORE] ipc_deregister_filter(): this filter invalid filter_id(%d)!")
    TRC_MSG(IPC_TR_DEREGISTER_FILTER_NOT_FOUND, "[IPCORE] ipc_deregister_filter(): filter_id(%d) is not found!")
    TRC_MSG(IPC_TR_DEREGISTER_FILTER_INFO, "[IPCORE] ipc_deregister_filter(): deleting a filter: filter_id(%d), features(0x%X), valid_fields(0x%X), with_ipv4(%d), with_ipv6(%d)")
    TRC_MSG(IPC_TR_REMOVE_DL_FILTER_FROM_LIST, "[IPCORE] ipc_deregister_filter(): remove filter_id(%d) from IPv%d filter list")
    TRC_MSG(IPC_TR_DHCP4C_EN_REG_DL_FILTER_OK, "[IPCORE] ipc_enable_dhcp4c(): session context(%d) type(%d) registered DL filter_id(%d)")
    TRC_MSG(IPC_TR_DHCP4C_EN_REG_DL_FILTER_NG, "[IPCORE] ipc_enable_dhcp4c(): session context(%d) type(%d) failed to register DL filter(%d)")
    TRC_MSG(IPC_TR_DHCP4C_EN_FAILED_WITH_INVALID_PARAMETER, "[IPCORE] ipc_enable_dhcp4c(): invalid session_ptr!")
    TRC_MSG(IPC_TR_DHCP4C_DIS_INFO, "[IPCORE] ipc_disable_dhcp4c(): session context(%d) type(%d) dhcp4c: running(%d)/dhcp_id(%d)/filter_id(%d)")
    TRC_MSG(IPC_TR_DHCP4C_DIS_DEREG_DL_FILTER_OK, "[IPCORE] ipc_disable_dhcp4c(): session context(%d) type(%d) deregistered DL filter_id(%d)")
    TRC_MSG(IPC_TR_DHCP4C_DIS_FAILED_WITH_INVALID_PARAMETER, "[IPCORE] ipc_disable_dhcp4c(): invalid session_ptr!")
    TRC_MSG(IPC_TR_DHCP4C_ACT_RSP_FIND_NO_SESSION, "[IPCORE] ipc_on_dhcp4c_activate_rsp(): failed to find session for ip_id(%d)!")
    TRC_MSG(IPC_TR_DHCP4C_ACT_RSP_OK, "[IPCORE] ipc_on_dhcp4c_activate_rsp(): session context(%d) type(%d) gets dhcp4c_id(%d)")
    TRC_MSG(IPC_TR_DHCP4C_ACT_RSP_INVALID_SESSION, "[IPCORE] ipc_on_dhcp4c_activate_rsp(): the session for ip_id(%d) became invalid!")
    TRC_MSG(IPC_TR_DHCP4C_ACT_RSP_NG, "[IPCORE] ipc_on_dhcp4c_activate_rsp(): session context(%d) type(%d) failed to activate DHCPv4!")
    TRC_MSG(IPC_TR_DHCP4C_IP_UP_IND_START, "[IPCORE] ipc_on_dhcp4c_ip_up_ind(): Start to handle DHCPv4 IP up indication : dhcp4c_ip_up_ind_ptr(0x%x)")
    TRC_MSG(IPC_TR_DHCP4C_IP_UP_IND_FIND_SESSION_RESULT, "[IPCORE] ipc_on_dhcp4c_ip_up_ind(): Result of finding session to for ip up indication : session(0x%x), ip_id(%d)")
    TRC_MSG(IPC_TR_DHCP4C_IP_UP_IND_SESSION_STATE, "[IPCORE] ipc_on_dhcp4c_ip_up_ind(): Current session state : session(0x%x), session_state(%d)")
    TRC_MSG(IPC_TR_DHCP4C_IP_UP_IND_END, "[IPCORE] ipc_on_dhcp4c_ip_up_ind(): Handle DHCPv4 IP up indication is done : dhcp4c_ip_up_ind_ptr(0x%x)")
    TRC_MSG(IPC_TR_DHCP4C_IP_UP_IND_SESSION_STATE_INCORRECT, "[IPCORE] ipc_on_dhcp4c_ip_up_ind(): session state is incorrect for ip_id(%d) : session(0x%x), state(%d)!")
    TRC_MSG(IPC_TR_DHCP4C_IP_UP_IND_FIND_NO_SESSION, "[IPCORE] ipc_on_dhcp4c_ip_up_ind(): failed to find session for ip_id(%d)!")
    TRC_MSG(IPC_TR_DHCP4C_IP_DOWN_IND_START, "[IPCORE] ipc_on_dhcp4c_ip_down_ind(): Start to handle DHCPv4 IP down indication : dhcp4c_ip_down_ind_ptr(0x%x)")
    TRC_MSG(IPC_TR_DHCP4C_IP_DOWN_IND_FIND_SESSION_RESULT, "[IPCORE] ipc_on_dhcp4c_ip_down_ind(): Result of finding session to for ip down indication : session(0x%x), ip_id(%d)")
    TRC_MSG(IPC_TR_DHCP4C_IP_DOWN_IND_SESSION_STATE, "[IPCORE] ipc_on_dhcp4c_ip_down_ind(): Current session state : session(0x%x), session_state(%d)")
    TRC_MSG(IPC_TR_DHCP4C_IP_DOWN_IND_END, "[IPCORE] ipc_on_dhcp4c_ip_down_ind(): Handle DHCPv4 IP down indication is done : dhcp4c_ip_down_ind_ptr(0x%x)")
    TRC_MSG(IPC_TR_DHCP4C_IP_DOWN_IND_SESSION_STATE_INCORRECT, "[IPCORE] ipc_on_dhcp4c_ip_down_ind(): session state is incorrect for ip_id(%d) : session(0x%x), state(%d)!")
    TRC_MSG(IPC_TR_DHCP4C_IP_DOWN_IND_FIND_NO_SESSION, "[IPCORE] ipc_on_dhcp4c_ip_down_ind(): failed to find session for ip_id(%d)!")
    TRC_MSG(IPC_TR_DHCP4C_IP_PACKET_IND_UPLINK_NG, "[IPCORE] ipc_on_dhcp4c_packet_ind(): failed to send the uplink GPD(0x%x) to session with ip_id(%d)!")
    TRC_MSG(IPC_TR_DHCP4C_IP_PACKET_IND_FIND_NO_SESSION, "[IPCORE] ipc_on_dhcp4c_packet_ind(): failed to find session for ip_id(%d)!")
    TRC_MSG(IPC_TR_DHCP4C_ON_DL_PACKET_FIND_NO_SESSION, "[IPCORE] ipc_on_dl_dhcp4_packet(): failed to find the session(0x%x)!")
    TRC_MSG(IPC_TR_DHCP4C_ON_DL_PACKET_INVALID_GPD_LIST, "[IPCORE] ipc_on_dl_dhcp4_packet(): discard the downlink IP datagram since head_gpd(0x%x) != tail_gpd(0x%x), length(%d)")
    TRC_MSG(IPC_TR_DO_FILTER_INVALID_GPD, "[IPCORE] ipc_do_filter(): got an invalid GPD(0x%X)!")
    TRC_MSG(IPC_TR_PACK_PKT_UDP_SIZE_NG, "[IPCORE] ipc_pack_pkt(): uplink(%d) : ip_header(%u)+udp_header(%u)+data_len(%u) exceeds %u-byte!")
    TRC_MSG(IPC_TR_PACK_PKT_ALLOC_GPD_NG, "[IPCORE] ipc_pack_pkt(): failed to allocate NET_UL_GPD for %u-byte of packet to send!")
    TRC_MSG(IPC_TR_PACK_PKT_SKIP_INVALID_GPD, "[IPCORE] ipc_pack_pkt(): skip header pack for invalid GPD : gpd(0x%x), gpd_len(%d)")
    TRC_MSG(IPC_TR_UL_PKT_PKT_PACK_FAILED, "[IPCORE] ipc_send_ul_pkt(): failed to pack uplink packet : isGPD(%d), hdr(0x%X)!")
    TRC_MSG(IPC_TR_DL_PKT_PKT_PACK_FAILED, "[IPCORE] ipc_send_dl_pkt(): failed to pack downlink packet : isGPD(%d), hdr(0x%X)!")
    TRC_MSG(IPC_TR_DL_PKT_NETIF_NOT_FOUND, "[IPCORE] ipc_send_dl_pkt(): destination network interface for ID(%d) is not found!")
    TRC_MSG(IPC_TR_REG_NTFY_BEGIN, "[IPCORE] ipc_register_ntfy(): register notification callback : callback(0x%X), callback context(0x%X)")
    TRC_MSG(IPC_TR_REG_NTFY_END, "[IPCORE] ipc_register_ntfy(): gotten ntfy ID(%d)")
    TRC_MSG(IPC_TR_DEREG_NTFY_BEGIN, "[IPCORE] ipc_deregister_ntfy(): uinstall notification callback : ntfy ID(%d)")
    TRC_MSG(IPC_TR_DEREG_NTFY_END, "[IPCORE] ipc_deregister_ntfy(): uinstall notification callback complete : ntfy ID(%d)")
    TRC_MSG(IPC_TR_ALLOCATE_NTFY_INVALID_PARAMS, "[IPCORE] ipc_allocate_ntfy(): failed with invalid parameters: callback(0x%X), callback context(0x%X)")
    TRC_MSG(IPC_TR_ALLOCATE_NTFY_UNAVAILABLE, "[IPCORE] ipc_allocate_ntfy(): failed with all notification entries are busy now! : callback(0x%X), callback context(0x%X)")
    TRC_MSG(IPC_TR_FREE_NTFY_INVALID_OBJECT, "[IPCORE] ipc_free_ntfy(): it's an invalid object!")
    TRC_MSG(IPC_TR_FIND_NTFY_BY_ID_INVALID_ID, "[IPCORE] ipc_find_ntfy_by_id(): ntfy ID(%d) is invalid ( %d <= [ntfy ID] < %d )!")
    TRC_MSG(IPC_TR_ADD_NTFY_TO_LIST_INVALID_LIST, "[IPCORE] ipc_add_ntfy_to_list(): invalid list(0x%x)!")
    TRC_MSG(IPC_TR_REMOVE_NTFY_FROM_LIST_INVALID_LIST, "[IPCORE] ipc_remove_ntfy_from_list(): invalid list(0x%x)!")
    TRC_MSG(IPC_TR_NTFY_INIT_POOL_INFO, "[IPCORE] ipc_ntfy_init(): IP CORE ntfy entry pool : addr(0x%X), count(%d)")
    TRC_MSG(IPC_TR_NTFY_INIT_LIST_INFO, "[IPCORE] ipc_ntfy_init(): IP CORE ntfy list[%d] : addr(0x%X)")
    TRC_MSG(IPC_TR_NEW_NTFY_ADD_TO_LIST, "[IPCORE] ipc_new_ntfy(): Add new ntfy with ID(%d) successfully for callback(0x%X) context(0x%X)")
    TRC_MSG(IPC_TR_NEW_NTFY_NG, "[IPCORE] ipc_new_ntfy(): Add new ntfy for callback(0x%X) context(0x%X) is failed")
    TRC_MSG(IPC_TR_DEL_NTFY_WITH_INVALID_ID, "[IPCORE] ipc_del_ntfy(): ntfy ID(%d) is invalid")
    TRC_MSG(IPC_TR_DEL_NTFY_INFO, "[IPCORE] ipc_del_ntfy(): entry with ntfy ID(%d) to delete : callback(0x%X), context(0x%X)")
    TRC_MSG(IPC_TR_DEL_NTFY_REMOVE_FROM_LIST, "[IPCORE] ipc_del_ntfy(): Remove entry with ntfy ID(%d) from list")
    TRC_MSG(IPC_TR_DEL_NTFY_FREE_NTFY, "[IPCORE] ipc_del_ntfy(): Free entry with ntfy ID(%d)")
    TRC_MSG(IPC_TR_DEL_NTFY_NOT_FOUND, "[IPCORE] ipc_del_ntfy(): Entry with ntfy ID(%d) is not found/already invalid")
    TRC_MSG(IPC_TR_DO_NTFY_INFO, "[IPCORE] ipc_do_ntfy(): Execute callback(0x%X) context(0x%X) for ntfy ID(%d)")
    TRC_MSG(IPC_TR_DO_NTFY_NTFY_INFO, "[IPCORE] ipc_do_ntfy(): ntfy type(%d), netif_id(0x%X), ip_id(0x%X)")
    TRC_MSG(IPC_TR_IPCORE_LINK_UP_IND_START, "[IPCORE] ipc_on_ipcore_link_up_ind(): Start of default LINK_UP_IND handling for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)")
    TRC_MSG(IPC_TR_IPCORE_LINK_UP_IND_SEND_LINK_UP_RSP, "[IPCORE] ipc_on_ipcore_link_up_ind(): Send LINK_UP_RSP ILM for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)")
    TRC_MSG(IPC_TR_IPCORE_LINK_UP_IND_END, "[IPCORE] ipc_on_ipcore_link_up_ind(): End of default LINK_UP_IND handling for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)")
    TRC_MSG(IPC_TR_IPCORE_IP_UP_IND_START, "[IPCORE] ipc_on_ipcore_ip_up_ind(): Start of default IP_UP_IND handling for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)")
    TRC_MSG(IPC_TR_IPCORE_IP_UP_IND_SEND_IP_UP_RSP, "[IPCORE] ipc_on_ipcore_ip_up_ind(): Send IP_UP_RSP ILM for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)")
    TRC_MSG(IPC_TR_IPCORE_IP_UP_IND_END, "[IPCORE] ipc_on_ipcore_ip_up_ind(): End of default IP_UP_IND handling for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)")
    TRC_MSG(IPC_TR_IPCORE_UP_RSP_START, "[IPCORE] ipc_on_ipcore_up_rsp(): Start of LINK/IP_UP_RSP handling for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)")
    TRC_MSG(IPC_TR_IPCORE_UP_RSP_UPDATE_SESSION_STATE_TO_LINKUP, "[IPCORE] ipc_on_ipcore_up_rsp(): Update session(0x%X) state to LINKUP")
    TRC_MSG(IPC_TR_IPCORE_UP_RSP_SESSION_NOT_FOUND, "[IPCORE] ipc_on_ipcore_up_rsp(): Session not found for netif(0x%X), netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)")
    TRC_MSG(IPC_TR_IPCORE_UP_RSP_NETIF_NOT_FOUND, "[IPCORE] ipc_on_ipcore_up_rsp(): network interface not found for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)")
    TRC_MSG(IPC_TR_IPCORE_UP_RSP_END, "[IPCORE] ipc_on_ipcore_up_rsp(): End of LINK/IP_UP_RSP handling for netif_id(0x%X), ip_id(0x%X), ip_type(0x%X)")
    TRC_MSG(IPC_TR_REG_LINK_UP_IND_HDLR_BEGIN, "[IPCORE] ipc_register_link_up_ind_handler(): Register LINK_UP_IND ILM handler : Module (%d)")
    TRC_MSG(IPC_TR_REG_LINK_UP_IND_HDLR_END, "[IPCORE] ipc_register_link_up_ind_handler(): Register LINK_UP_IND ILM handler complete : Module (%d)")
    TRC_MSG(IPC_TR_DEREG_LINK_UP_IND_HDLR_BEGIN, "[IPCORE] ipc_deregister_link_up_ind_handler(): Uninstall registered LINK_UP_IND ILM handler")
    TRC_MSG(IPC_TR_DEREG_LINK_UP_IND_HDLR_END, "[IPCORE] ipc_deregister_link_up_ind_handler(): Uninstall registered LINK_UP_IND ILM handler complete")
    TRC_MSG(IPC_TR_REG_IP_UP_IND_HDLR_BEGIN, "[IPCORE] ipc_register_ip_up_handler(): Register IP_UP_IND ILM handler : Module (%d)")
    TRC_MSG(IPC_TR_SET_UL_THROTTLE_BEGIN, "[IPCORE] ipc_set_ul_throttle(): Set UL throttle, old_state(%d), new_conf_enabled(%d), new_conf_activate(%d), new_conf_suspend(%d)")
    TRC_MSG(IPC_TR_SET_UL_THROTTLE_END, "[IPCORE] ipc_set_ul_throttle(): Set UL throttle, new_state(%d), new_conf_enabled(%d), new_conf_activate(%d), new_conf_suspend(%d)")
    TRC_MSG(IPC_TR_UL_THROTTLE_SYSMSGSRV_CBK, "[IPCORE] ipc_ul_throttle_sysmsgsvc_cbk(): CCCI_SYSMSG Set UL throttle, new_state(%d), new_conf_enabled(%d), new_conf_activate(%d), new_conf_suspend(%d)")
    TRC_MSG(IPC_TR_REG_IP_UP_IND_HDLR_END, "[IPCORE] ipc_register_ip_up_handler(): Register IP_UP_IND ILM handler complete : Module (%d)")
    TRC_MSG(IPC_TR_DEREG_IP_UP_IND_HDLR_BEGIN, "[IPCORE] ipc_deregister_ip_up_handler(): Uninstall registered IP_UP_IND ILM handler")
    TRC_MSG(IPC_TR_DEREG_IP_UP_IND_HDLR_END, "[IPCORE] ipc_deregister_ip_up_handler(): Uninstall registered IP_UP_IND ILM handler complete")
    TRC_MSG(IPC_TR_UPDATE_LINK_UP_IND_HDLR_START, "[IPCORE] ipc_update_link_up_ind_handler(): Update LINK_UP_IND ILM handler : Module (%d)")
    TRC_MSG(IPC_TR_UPDATE_IP_UP_IND_HDLR_START, "[IPCORE] ipc_update_ip_up_ind_handler(): Update IP_UP_IND ILM handler : Module (%d)")
    TRC_MSG(IPC_TR_QUERY_INFO_START, "[IPCORE] ipc_on_query_info(): Start to query information: src_mod_id(%d), local_para_ptr(0x%x)")
    TRC_MSG(IPC_TR_QUERY_INFO_CNF, "[IPCORE] ipc_on_query_info(): Send confirmation back to src_mod_id(%d)")
    TRC_MSG(IPC_TR_QUERY_INFO_NO_MOD_ID_FOR_CFN, "[IPCORE] ipc_on_query_info(): No source module ID to send confirmation back ! src_mod_id(%d) is MOD_NIL(%d)")
    TRC_MSG(IPC_TR_QUERY_INFO_END, "[IPCORE] ipc_on_query_info(): Query information handling is done")
    TRC_MSG(IPC_TR_QUERY_NETIF_LIST_START, "[IPCORE] ipc_query_netif_list(): Query netif list : netif_list_p(0x%x)")
    TRC_MSG(IPC_TR_QUERY_NETIF_LIST_INFO, "[IPCORE] ipc_query_netif_list(): Attached netif: idx(%d) netif_id(%d)")
    TRC_MSG(IPC_TR_QUERY_NETIF_LIST_SUCCESS, "[IPCORE] ipc_query_netif_list(): Netif list query success. Total attached netif count(%d)")
    TRC_MSG(IPC_TR_QUERY_NETIF_LIST_FAILED, "[IPCORE] ipc_query_netif_list(): No structure to store netif list status, failed !")
    TRC_MSG(IPC_TR_CLARIFY_ZERO_LENGTH_PKT, "[IPCORE] ipc_clarify_gpd(): Found zero length packet during clarification : curr_gpd(0x%x), length(%d)")
    TRC_MSG(IPC_TR_CLARIFY_ZERO_LENGTH_BD, "[IPCORE] ipc_clarify_gpd(): Found packet with ALL ZERO-length BD list during clarification : curr_gpd(0x%x), gpd length(%d)")
    TRC_MSG(IPC_TR_CLARIFY_NONE_IP_PKT, "[IPCORE] ipc_clarify_gpd(): Found non-IPv4/IPv6 packet, drop : curr_gpd(0x%x), gpd length(%d)")
    TRC_MSG(IPC_TR_CLARIFY_ZERO_LENGTH_PKT_DROP, "[IPCORE] ipc_clarify_gpd(): Drop packet with invalid payload : curr_gpd(0x%x), gpd length(%d)")
    TRC_MSG(IPC_TR_GPD_COPY_BEGIN, "[IPCORE] ipc_gpd_copy(): Start to copy GPD: dst_buffer(0x%x), dst_max_len(%d), dst_len_copied(0x%x), src_head_gpd(0x%x), src_tail_gpd(0x%x)")
    TRC_MSG(IPC_TR_GPD_COPY_END, "[IPCORE] ipc_gpd_copy(): GPD copy result: retval(%d), dst_max_len(%d), *dst_len_copied(%d)")
    TRC_MSG(IPC_TR_GPD_UNITE_NULL_BD_LIST, "[IPCORE] ipc_gpd_unite(): Null BD list (no BD have data) is found: uplink(%d), p_gpd_in(0x%x)")
    TRC_MSG(IPC_TR_GPD_UNITE_ZERO_LENGTH_GPD, "[IPCORE] ipc_gpd_unite(): zero length GPD is found: uplink(%d), p_gpd_in(0x%x)")
    TRC_MSG(IPC_TR_GPD_UNITE_ALLOC_GPD_NG, "[IPCORE] ipc_gpd_unite(): Allocate new GPD for uniting is FAILED: uplink(%d), p_gpd_in(0x%x), total_len(%d)")
    TRC_MSG(IPC_TR_GPD_UNITE_GPD_COPY_NG, "[IPCORE] ipc_gpd_unite(): GPD copy is FAILED: uplink(%d), p_buff(0x%x), total_len(%d), copied_len(%d), p_gpd_in(0x%x)")
    TRC_MSG(IPC_TR_GPD_UNITE_FAILED, "[IPCORE] ipc_gpd_unite(): GPD uniting is FAILED: uplink(%d), p_gpd_in(0x%x)")
    TRC_MSG(IPC_TR_SHIFT_OFFSET_FAILED, "[IPCORE] ipc_shift_gpd_content_ptr(): GPD is too short to get offset! gpd(0x%x) base_bd(0x%x) curr_bd(0x%x) curr_bd_len(%d) remaining_offset(%d) base_addr_p(0x%x) offset(%d)")
    TRC_MSG(IPC_TR_CONTENT_LENGTH_TOO_SHORT, "[IPCORE] ipc_get_continuous_content(): GPD is too short to shift offset! gpd(0x%x) base_bd(0x%x) curr_bd(0x%x) base_addr_p(0x%x) offset(%d) length(%d)")
    TRC_MSG(IPC_TR_CONTENT_LENGTH_TOO_SHORT_TO_COPY, "[IPCORE] ipc_get_continuous_content(): GPD is too short to copy specific continuous content! gpd(0x%x) base_bd(0x%x) curr_bd(0x%x) curr_bd_len(%d) remaining_length(%d) base_addr_p(0x%x) offset(%d) length(%d)")
    TRC_MSG(IPC_TR_GET_INFO_V4_IPV4_HDR_FAILED, "[IPCORE] ipc_get_packet_info(): V4 get IPv4 header continuous content failed: ip_packet(0x%x), offset(%d), gpd(0x%x), curr_bd(0x%x), length(%d)")
    TRC_MSG(IPC_TR_GET_INFO_V4_UDP_HDR_FAILED, "[IPCORE] ipc_get_packet_info(): V4 get UDP header continuous content failed: ip_packet(0x%x), offset(%d), gpd(0x%x), curr_bd(0x%x), length(%d)")
    TRC_MSG(IPC_TR_GET_INFO_V4_TCP_HDR_FAILED, "[IPCORE] ipc_get_packet_info(): V4 get TCP header continuous content failed: ip_packet(0x%x), offset(%d), gpd(0x%x), curr_bd(0x%x), length(%d)")
    TRC_MSG(IPC_TR_GET_INFO_V4_ICMP_HDR_FAILED, "[IPCORE] ipc_get_packet_info(): V4 get ICMP header continuous content failed: ip_packet(0x%x), offset(%d), gpd(0x%x), curr_bd(0x%x), length(%d)")
    TRC_MSG(IPC_TR_GET_INFO_V6_IPV6_HDR_FAILED, "[IPCORE] ipc_get_packet_info(): V6 get IPv6 header continuous content failed: ip_packet(0x%x), offset(%d), gpd(0x%x), curr_bd(0x%x), length(%d)")
    TRC_MSG(IPC_TR_GET_INFO_V6_UDP_HDR_FAILED, "[IPCORE] ipc_get_packet_info(): V6 get UDP header continuous content failed: ip_packet(0x%x), offset(%d), gpd(0x%x), curr_bd(0x%x), length(%d)")
    TRC_MSG(IPC_TR_GET_INFO_V6_TCP_HDR_FAILED, "[IPCORE] ipc_get_packet_info(): V6 get TCP header continuous content failed: ip_packet(0x%x), offset(%d), gpd(0x%x), curr_bd(0x%x), length(%d)")
    TRC_MSG(IPC_TR_GET_INFO_V6_ICMP_HDR_FAILED, "[IPCORE] ipc_get_packet_info(): V6 get ICMP header continuous content failed: ip_packet(0x%x), offset(%d), gpd(0x%x), curr_bd(0x%x), length(%d)")
    TRC_MSG(IPC_TR_GET_INFO_FIND_V6_EXT_HDR_FAILED, "[IPCORE] ipc_get_packet_info(): V6 extension header continuous content get failed: gpd(0x%x) base_bd(0x%x) next_header(0x%x) offset(%d) curr_bd(0x%x)")
    TRC_MSG(IPC_TR_GET_INFO_FIND_V6_EXT_HDR_SHIFT_FAILED, "[IPCORE] ipc_get_packet_info(): V6 header next header shift failed: gpd(0x%x) base_bd(0x%x) ip_packet(0x%x) offset(%d) next_header(0x%x) curr_bd(0x%x)")

    /*
     * Packet Filter Manager trace log.
     */
    TRC_MSG(PFM_TR_GET_FILTER_SET_INVALID_PARAMS, "[PFM] pfm_get_filter_set_by_id(): Invalid parameters: filter_set_list(0x%x), list_size(%d), filter_set_id(%d)")
    TRC_MSG(PFM_TR_GET_FILTER_SET_NEW_FILTER_SET, "[PFM] pfm_get_filter_set_by_id(): New filter set: filter_set_list(0x%x), filter_set_id(%d), filter_set(0x%x)")
    TRC_MSG(PFM_TR_DEL_FILTER_SET_BEGIN, "[PFM] pfm_delete_filter_set(): Delete filter set: filter_set(0x%x)")
    TRC_MSG(PFM_TR_DISPATCH_REGISTER_CMD_INVALID_PARAMS, "[PFM] pfm_dispatch_register_cmd(): Invalid parameters: local_para_ptr(0x%x), filter_set_id(%d), filter_cnt(%d)!")
    TRC_MSG(PFM_TR_DISPATCH_REGISTER_CMD_BEGIN, "[PFM] pfm_dispatch_register_cmd(): Dispatch register cmd: filter_set_id(0x%x), filter_cnt(%d)")
    TRC_MSG(PFM_TR_DEREG_FILTER_BEGIN, "[PFM] pfm_deregister_filter(): Deregister the filter: uplink(%d), filter_set(0x%x), filter_id(%d), ipc_filter_id(%d)")
    TRC_MSG(PFM_TR_DEREG_FILTER_WITH_INVALID_PARAMS, "[PFM] pfm_deregister_filter(): Invalid parameters: uplink(%d), filter_set(0x%x), filter_id(%d)!")
    TRC_MSG(PFM_TR_DEREG_FILTERS_INVALID_PARAMS, "[PFM] pfm_deregister_filters(): Invalid parameters: local_para_ptr(0x%x), filter_set_id(%d), filter_cnt(%d)!")
    TRC_MSG(PFM_TR_DEREG_FILTERS_INFO, "[PFM] pfm_deregister_filters(): Deregister some filters: uplink(%d), filter_set_id(%d), filter_cnt(%d)")
    TRC_MSG(PFM_TR_DEREG_FILTERS_FILTER_SET_NOT_FOUND, "[PFM] pfm_deregister_filters(): uplink(%d), filter_set_id(%d) is not found!")
    TRC_MSG(PFM_TR_REG_FILTER_INVALID_PARAMS, "[PFM] pfm_register_filter(): Invalid parameters: filter_set_id(%d), filter_id(%d), rules(0x%x)!")
    TRC_MSG(PFM_TR_REG_FILTER_FAILED, "[PFM] pfm_register_filter(): Register filter is failed!")
    TRC_MSG(PFM_TR_REG_FILTER_FILTER_SET_NOT_FOUND, "[PFM] pfm_register_filter(): uplink(%d), filter_set_id(%d) is not found!")
    TRC_MSG(PFM_TR_REG_FILTER_CBK_BEGIN, "[PFM] pfm_register_filter_cbk(): filter_set_id(%d), filter_id(%d), uplink(%d), rules(0x%x) callback_func(0x%x) callback_context(0x%x)")
    TRC_MSG(PFM_TR_REG_FILTER_MSG_BEGIN, "[PFM] pfm_register_filter_msg(): filter_set_id(%d), filter_id(%d), uplink(%d), rules(0x%x) callback_module(0x%x) callback_context(0x%x)")
    TRC_MSG(PFM_TR_REG_FILTER_WITH_INFO_CBK_BEGIN, "[PFM] pfm_register_filter_with_info_cbk(): filter_set_id(%d), filter_id(%d), uplink(%d), rules(0x%x) callback_func(0x%x) callback_context(0x%x)")
    TRC_MSG(PFM_TR_REG_FILTER_WITH_INFO_MSG_BEGIN, "[PFM] pfm_register_filter_with_info_msg(): filter_set_id(%d), filter_id(%d), uplink(%d), rules(0x%x) callback_module(0x%x) callback_context(0x%x)")

    /* Garbage Filter */
    TRC_MSG(PFM_TR_GARBAGE_FILTER_ZERO_LENGTH_GPD, "[PFM] pfm_garbage_filter_deregister_callback(): Get zero length GPD(0x%x).")
    TRC_MSG(PFM_TR_GARBAGE_FILTER_NON_TCP_PACKET, "[PFM] pfm_garbage_filter_deregister_callback(): Should get TCP packets only! GPD(0x%x), proto(%d)")
    TRC_MSG(PFM_TR_GARBAGE_FILTER_NON_IPV4_PACKET, "[PFM] pfm_garbage_filter_deregister_callback(): Should get IPv4 packets only! GPD(0x%x)")
    TRC_MSG(PFM_TR_GARBAGE_FILTER_REPLY_RST_FAIL, "[PFM] pfm_garbage_filter_deregister_callback(): Replay TCP RST is failed! Can't alloc HIF_UL_TYPE_S GPD! dst_address(0x%x), src_port(%d)")
    TRC_MSG(PFM_TR_GARBAGE_FILTER_REPLY_RST, "[PFM] pfm_garbage_filter_deregister_callback(): Replay TCP RST dst_address(0x%x), src_port(%d)")
    TRC_MSG(PFM_TR_GARBAGE_FILTER_REG_PARSER, "[PFM] pfm_garbage_filter_register_parser(): Register filter rules: filter_id(%d), ip_type(%d), protocol(%d), dst_port(%d)")
    TRC_MSG(PFM_TR_GARBAGE_FILTER_WRONG_MAGIC_CODE, "[PFM] pfm_garbage_filter_register_parser(): Wrong magic code is detected when registering filter(%d)!")
    TRC_MSG(PFM_TR_GARBAGE_FILTER_INVALID_PARAMS, "[PFM] pfm_garbage_filter_register_parser(): Invalid parameters is detected: ip_type(%d), protocol(%d)!")
    TRC_MSG(PFM_TR_GARBAGE_FILTER_INVALID_FILTER_ID, "[PFM] pfm_garbage_filter_register_parser(): Invalid Filter ID!")

END_TRACE_MAP(MOD_IPCORE)

#endif /* __INC_IPC_TRACE_H */
