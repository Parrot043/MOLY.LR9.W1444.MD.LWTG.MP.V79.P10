/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2007
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/

/****************************************************************************
 * PARTS OF THIS FILE ARE AUTOGENERATED
 * DO NOT EDIT EXCEPT BETWEEN LINES MARKED !BEGIN MANUAL CODE and !END MANUAL CODE
 *               Assignment :
 *               CONFIDENTIAL
 *               Copyright (c) 2000-2005, UbiNetics Ltd. All rights reserved.
 *               Cambridge Technology Centre
 *               Melbourn Royston
 *               Herts SG8 6DP UK
 *               Tel: +44 1763 262222
 *
 ****************************************************************************
 * !BEGIN MANUAL CODE! (HEADERS)
 *
 * COMPONENT:    (Insert Component Name)
 * MODULE:       $RCSfile: rsvas_struct.h,v $
 * VERSION:      $Revision: 1.0 $
 * DATED:        $Date: 2009/06/12 14:22:29 $
 * AUTHOR:
 * DESCRIPTION:  Check Header for full description
 *
 ****************************************************************************/
/* !END MANUAL CODE! (HEADERS) */
/*****************************************************************************
 * $Log:$
 *
 * removed!
 * removed!
 * .
 * 
 * removed!
 * removed!
 * .
 *
 * removed!
 * removed!
 * .
 *
 * removed!
 * removed!
 * .
 *
 * removed!
 * removed!
 * .
 *
 * removed!
 * removed!
 * .
 *
 * removed!
 * removed!
 * .
 *
 * removed!
 * removed!
 * .
 *
 * removed!
 * removed!
 * .
 *
 * removed!
 * removed!
 * .
 *
 * removed!
 * removed!
 * .
 *
 * removed!
 * removed!
 * 
 *
 * removed!
 * removed!
 * 
 *
 * removed!
 * removed!
 * 
 ****************************************************************************/

#if !defined(_RSVAS_STRUCT_H)
#define _RSVAS_STRUCT_H

#include "rsvas_enum.h"
#include "kal_public_api.h"
#include "kal_general_types.h"


#define RSVA_MAX_USER_CALLER   32

extern kal_uint32 rsva_ack_bitmask;
extern kal_eventgrpid rsva_evg;

extern kal_uint32 rsva_evg_get_available_ack_slot(void);
extern void rsva_evg_ack_slot(kal_uint32 ack);
extern void rsva_evg_free_slot(kal_uint32 ack);



typedef struct {
   LOCAL_PARA_HDR   
   rsvas_id_enum id;
   kal_uint32 event_ack;  /* bitmap for event group*/
   rsvas_service_type_enum service_type;
   rsvas_request_type_enum request_type; /* __GEMINI_PREEMPT_PEER_SERVICE__ only */
} rsvas_service_res_occupy_req_struct;

#ifdef UNIT_TEST
/* Dennis Weng 2010/03/24: it's used only for UT
        when AS send occupy REQ to RSVAS, RSVAS will send back by using rsvas_service_res_occupy_cnf_struct
*/
typedef struct {
   LOCAL_PARA_HDR   
   kal_bool success;
} rsvas_service_res_occupy_cnf_struct;

typedef struct {
   LOCAL_PARA_HDR   
   kal_bool result;
} rsvas_ut_result_ind_struct;

#if defined(__ETWS_SUPPORT__) || defined(__LTE_RAT__)
typedef struct {
   LOCAL_PARA_HDR   
   kal_bool success;
} rsvas_as_update_etws_priority_cnf_struct;
#endif /* __ETWS_SUPPORT__ || __LTE_RAT__ */

#endif /* UNIT_TEST */

typedef struct {
   LOCAL_PARA_HDR   
   rsvas_id_enum new_id;
   kal_uint32 event_ack;  /* bitmap for event group*/   
   rsvas_service_type_enum reserve_domain_service_after_transfer;
} rsvas_service_res_transfer_req_struct;

typedef struct {
   LOCAL_PARA_HDR   
   rsvas_id_enum id; /* __GEMINI_PREEMPT_PEER_SERVICE__ only */
   kal_uint32 event_ack;  /* bitmap for event group*/
   rsvas_service_type_enum service_type; /* __GEMINI_PREEMPT_PEER_SERVICE__ only */
   rsvas_request_type_enum request_type; /* __GEMINI_PREEMPT_PEER_SERVICE__ only */
} rsvas_service_res_release_req_struct;

typedef struct {
   LOCAL_PARA_HDR   
   rsvas_id_enum id;
   kal_uint32 event_ack;  /* bitmap for event group*/
} rsvas_service_common_struct;

#if defined(__GSM_RAT__)
typedef struct {
   LOCAL_PARA_HDR   
   rsvas_service_type_enum peer_service_type;
} rsvas_gas_suspend_service_req_struct;
#endif /* __GSM_RAT__ */

#if defined(__UMTS_RAT__)
typedef struct {
   LOCAL_PARA_HDR   
   rsvas_service_type_enum peer_service_type;
} rsvas_uas_suspend_service_req_struct;

typedef struct {
   LOCAL_PARA_HDR   
   rsvas_service_type_enum peer_service_type;
} rsvas_ul2_suspend_service_req_struct;

typedef struct {
   LOCAL_PARA_HDR   
   rsvas_service_type_enum peer_service_type;
} rsvas_ul2d_suspend_service_req_struct;
#endif /* __UMTS_RAT__ */

#if defined(__LTE_RAT__)
typedef struct {
   LOCAL_PARA_HDR   
   rsvas_service_type_enum peer_service_type;
} rsvas_eas_suspend_service_req_struct;

typedef struct {
   LOCAL_PARA_HDR   
   rsvas_service_type_enum peer_service_type;
} rsvas_el2task_suspend_service_req_struct;
#endif /* __LTE_RAT__ */

#if defined(__GEMINI_PREEMPT_PEER_SERVICE__)
#if defined(__GSM_RAT__)
typedef struct {
   LOCAL_PARA_HDR   
   rsvas_service_type_enum peer_service_type;
} rsvas_gas_abort_service_req_struct;
#endif /* __GSM_RAT__ */

#if defined(__UMTS_RAT__)
typedef struct {
   LOCAL_PARA_HDR   
   rsvas_service_type_enum peer_service_type;
} rsvas_uas_abort_service_req_struct;
#endif /* __UMTS_RAT__ */

#if defined(__LTE_RAT__)
typedef struct {
   LOCAL_PARA_HDR   
   rsvas_service_type_enum peer_service_type;
} rsvas_eas_abort_service_req_struct;
#endif /* __LTE_RAT__ */
#endif /* __GEMINI_PREEMPT_PEER_SERVICE__ */

#if defined(__GEMINI_MONITOR_PAGE_DURING_TRANSFER__)    
#if defined(__GSM_RAT__)
typedef struct {
   LOCAL_PARA_HDR   
   rsvas_service_type_enum peer_service_type;
   rsvas_sim_enum sim_in_transfer;
} rsvas_gas_virtual_suspend_service_req_struct;

typedef struct {
   LOCAL_PARA_HDR
   rsvas_sim_enum sim_in_transfer;
} rsvas_l1_virtual_resume_req_struct;
#endif /* __GSM_RAT__ */

#if defined(__UMTS_RAT__)
typedef struct {
   LOCAL_PARA_HDR   
   rsvas_service_type_enum peer_service_type;
} rsvas_uas_virtual_suspend_service_req_struct;
#endif /* __UMTS_RAT__ */

#if defined(__LTE_RAT__)
typedef struct {
   LOCAL_PARA_HDR   
   rsvas_service_type_enum peer_service_type;
} rsvas_eas_virtual_suspend_service_req_struct;
#endif /* __LTE_RAT__ */

typedef struct {
   LOCAL_PARA_HDR   
   rsvas_id_enum id;
   kal_bool is_call_prefer;
} rsvas_as_preference_mode_req_struct;

/* Dennis Weng 2011/05/26: move to as2l4c_struct.h */
//typedef struct {
//   LOCAL_PARA_HDR   
//   kal_bool is_turn_on;
//} rsvas_monitor_peer_pch_switch_req_struct;
#endif /* __GEMINI_MONITOR_PAGE_DURING_TRANSFER__ */

typedef struct {
   LOCAL_PARA_HDR   
   rsvas_id_enum id;
   kal_bool is_turn_on;
} rsvas_rf_switch_req_struct;


#if defined(__ETWS_SUPPORT__) || defined(__LTE_RAT__)
typedef struct {
    LOCAL_PARA_HDR 
    rsvas_id_enum id;
    kal_uint32 event_ack;  /* bitmap for event group*/    
    kal_bool is_protect_req;
} rsvas_as_update_etws_priority_req_struct;
#endif /* __ETWS_SUPPORT__ || __LTE_RAT__ */


#endif /* _RSVAS_STRUCT_H */

