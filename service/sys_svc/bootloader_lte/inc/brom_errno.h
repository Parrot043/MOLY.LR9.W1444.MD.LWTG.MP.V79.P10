/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2012
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/

/*******************************************************************************
 * Filename:
 * ---------
 *   brom_errno.h
 *
 * Project:
 * --------
 *   BootROM
 *
 * Description:
 * ------------
 *   Definition of error codes
 *
 * Author:
 * -------
 * -------
 *
 * ==========================================================================
 * $Log$
 *
 * removed!
 * removed!
 * Fix EXT_SP build error.
 ****************************************************************************/
#ifndef _BROM_ERRNO_H
#define _BROM_ERRNO_H

#define ERR_OK		0

#define ERR_EXCEPTION_PREFIX	0x00000000
#define ERR_CS_PREFIX			0x10000000
#define ERR_NFI_PREFIX			0x20000000
#define ERR_SPI_PREFIX			0x30000000
#define ERR_USB_PREFIX			0x40000000
#define ERR_SDIO_PREFIX			0x50000000
#define ERR_XBOOT_PREFIX		0x60000000
#define ERR_LOG_PREFIX			0x70000000

typedef enum{
	E_INCORRECT_PACKET_FORMAT = 1,
	E_IMPOSSIBLE_DATA_LEN,
	E_ONLY_PART_OF_DATA_WAS_WRITTEN,
	E_CMD_NOT_ALLOWED_IN_THE_CURRENT_STATE,
	E_VERIFICATION_FAIL,
	E_MEM_REGION_NOT_ALLOWED_TO_BE_WRITTEN,
	E_SBC_PUBK_HASH_INCONSISTENT_WITH_EFUSE,
	E_M1_INVALID_LEN,
	E_M1_CMAC_NOT_MATCH,
	E_TOOL_CERT_INVALID,
	E_TOOL_CERT_ROOT_CERT_NOT_FOUND,
	E_TOOL_CERT_SBC_KEY_NOT_VALID_IN_ROOT_CERT,
	E_TOOL_CERT_SIG_DECRYPT_FAILED,
	E_TOOL_CERT_SIG_VERIFY_FAILED,
	E_SLA_CHALLENGE_SLA_PUBK_DECRYPT_FAIL,
	E_SLA_CHALLENGE_VERIFY_FAIL,
	E_DAA_SIG_DECRYPT_ERROR,
	E_DAA_SIG_VERIFY_FAILED,
	E_DAA_DA_INVALID,
	E_DAA_HASH_INCONSISTENT_WITH_TOOL_CERT,
	E_SCTRL_CERT_INVALID,
	E_SCTRL_CERT_ROOT_CERT_NOT_FOUND,
	E_SCTRL_CERT_SBC_KEY_NOT_VALID_IN_ROOT_CERT,
	E_SCTRL_CERT_ME_IDENTITY_NOT_MATCH,
	E_SCTRL_CERT_SIG_DECRYPT_FAILED,
	E_SCTRL_CERT_SIG_VERIFY_FAILED,
	E_ROOT_CERT_INVALID,
	E_ROOT_CERT_SIG_DECRYPT_FAILED,
	E_ROOT_CERT_SIG_VERIFY_FAILED,
	E_UNEXPECTED_RETURN_FROM_CS,
	E_FLASH_NOT_EXIST,
	E_SIZE_EXCEED_CMAC_VERIFY_UNIT,
	E_DAA_DA_SIZE_INVALID,
}brom_sla_err_t;

typedef enum{
	E_IMG_TBL_NOT_EXIST = 1,
	E_IMG_TBL_CRC_FAIL, 
	E_IMG_TBL_CRC_BUF_NOT_ENOUGH,
	E_IMG_TBL_ENTRY_NOT_EXIST,
	E_CS_NOT_EXIST,
	E_CS_INVALID_ADDR,
	E_CS_BUF_NOT_ENOUGH,
	E_CS_CMAC_VERIFY_FAIL,
	E_CS_USBDL_KEY_PRESSED,
	E_CS_FORCEDL_ENABLED,
	E_RESCUE_CONDITION_MATCH,
	E_CS_SIZE_EXCEED_CMAC_VERIFY_UNIT,
	E_CS_FLASH_EMPTY,
}brom_cs_err_t;

typedef enum{
	E_EXCEPTION_UNDF = 1, 
	E_EXCEPTION_PABT,
	E_EXCEPTION_DABT,
}brom_exception_err_t;

typedef enum{
	E_XBOOT_IMG_TBL_NOT_EXIST = 1, 
	E_XBOOT_IMG_TBL_CRC_FAIL,
	E_XBOOT_IMG_TBL_CRC_BUF_NOT_ENOUGH,
	E_XBOOT_IMG_TBL_ENTRY_NOT_EXIST,
	E_XBOOT_DA_NOT_EXIST,
	E_XBOOT_DA_INVALID_ADDR,
	E_XBOOT_DA_CMAC_VERIFY_FAILED,
	E_XBOOT_START_CMD_ERROR,
	E_XBOOT_BINLOAD_END_CMD_ERROR,
	E_XBOOT_MAIL_BOX_SYNC_FAIL,
	E_XBOOT_DA_UNEXPECTED_RETURN,
	E_XBOOT_CMD_SEND_DATA_FAIL,
	E_XBOOT_CMD_GET_DATA_FAIL,
	E_XBOOT_CMD_GET_DATA_SIZE_FAIL,
	E_XBOOT_CMD_STATUS_MSG_ID_INVALID,
	E_XBOOT_CMD_STATUS_ACK_MAGIC_MISMATCH,
	E_XBOOT_CMD_STATUS_ACK_ID_NOT_MATCH,
	E_XBOOT_CMD_STATUS_ACK_NOT_OK,
	E_XBOOT_CMD_GETBIN_ACK_MAGIC_MISMATCH,
	E_XBOOT_CMD_GETBIN_ACK_ID_NOT_MATCH,
	E_XBOOT_CMD_GETBIN_ACK_NOT_OK,
	E_XBOOT_CMD_DBGPRINT_ACK_MAGIC_MISMATCH,
	E_XBOOT_CMD_DBGPRINT_ACK_ID_NOT_MATCH,
	E_XBOOT_CMD_DBGPRINT_ACK_NOT_OK,
}brom_xboot_err_t;

typedef enum{
    E_EXCEPTION_GDB_SYNC_TIMEOUT   = 0x01000000,
    E_EXCEPTION_SEND_PKT_TIMEOUT   = 0x02000000, 
    E_EXCEPTION_GET_PKT_TIMEOUT    = 0x03000000, 
    E_EXCEPTION_UL_GPD_SIG_ERR     = 0x04000001, 
    E_EXCEPTION_DL_GPD_SIG_ERR     = 0x04000002, 
    E_EXCEPTION_MB_SDDL_BLOCKED    = 0x05000000,
    E_EXCEPTION_SEND_PKT_BLOCKED   = 0x06000000, 

    E_EXCEPTION_TEST_OUTPUT        = 0x0F000000, 

}brom_sdio_err_t;

typedef enum{
	E_USB_GPD_SIG_ERR		= 0x01000000,
	E_USB_GPD_SIG_ERR_UL	= 0x01000001,
	E_USB_GPD_SIG_ERR_DL	= 0x01000002,
	E_USB_TXRX_ERR			= 0x02000000,
	E_USB_TX_TIMEOUT		= 0x02000001,
	E_USB_TX_BLOCKED		= 0x02000002,
	E_USB_PHY_INIT_ERR		= 0x03000000,
	E_USB_PHY_PWR_BLOCKED	= 0x03000001,
	E_USB_EP0_ERR			= 0x04000000,
	E_USB_EP0_SETUPEND		= 0x04000001,
	E_USB_EP0_STALL			= 0x04000002,
}brom_usb_err_t;

typedef enum{
	E_SPI_ADDR_TYPE_UNKNOWN = 1,
	E_SPI_WAIT_WIP_TIMEOUT,	
}brom_spi_err_t;

typedef enum{	
	E_HIF_USB_CONFIG = 1,
	E_HIF_SDIO_CONFIG,
}brom_log_err_t;

typedef enum
{
   //--------- NFI successful code -------------------
    NFI_OPERATION_SUCCESS               = 0x00
   ,NFI_ECC_CORRECTED                   = 0x01
   ,NFI_STOP_AT_BLOCK_BOUNDARY          = 0x02
   ,NFI_ECC_DMA_CORRECTED               = 0x03
   //--------- NFI error code ------------------------
   ,NFI_ERROR                                 = 0x30
   ,NFI_BAD_BLOCK                         = NFI_ERROR
   ,NFI_ECC_UNCORRECT                  = 0x31
   ,NFI_ECC_TIMEOUT                      = 0x32
   ,NFI_CMD_TIMEOUT                     = 0x33
   ,NFI_ADDR_TIMEOUT                    = 0x34
   ,NFI_DATA_TIMEOUT                    = 0x35
   ,NFI_PROG_TIMEOUT                    = 0x36
   ,NFI_ERASE_TIMEOUT                   = 0x37
   ,NFI_READ_SW_TIMEOUT              = 0x38
   ,NFI_READ_INTR_TIMEOUT            = 0x39
   ,NFI_READ_BATCH_TIMEOUT         = 0x3A
   ,NFI_RESET_SW_TIMEOUT             = 0x3B
   ,NFI_RESET_INTR_TIMEOUT           = 0x3C
   ,NFI_RESET_BATCH_TIMEOUT        = 0x3D
   ,NFI_DEVICE_TIMEOUT                 = 0x3E
   ,NFI_ADDRCNTR_TIMEOUT             = 0x3F
   ,NFI_ENC_IDLE_TIMEOUT              = 0x40
   ,NFI_PROG_FAILED                       = 0x41
   ,NFI_ERASE_FAILED                      = 0x42
   ,NFI_BUF_NOT_4B_ALIGNED          = 0x43
   ,NFI_FCD_INVALID_PARAM            = 0x44
   ,NFI_ECC_INVALID_PARAM            = 0x45
   ,NFI_BUF_INVALID_PARAM            = 0x46
   ,NFI_LOGIC_BLK_ADDR_EXCEED_TTBL      = 0x47
   ,NFI_ERROR_WITH_PAGE_SIZE       = 0x48
   ,NFI_ERROR_WITH_SPARE_SIZE      = 0x49
   ,NFI_FCD_ALLOC_ERROR                   = 0x4A
   //--------- ECC error code ------------------------
   ,NFI_ECC_DMA_UNCORRECT               = 0x61
   ,NFI_ECC_DMA_INVALID_PARAMETER       = 0x62
   ,NFI_ECC_DMA_EXCEED_MAX_ENCODE_SIZE  = 0x63
   ,NFI_ECC_DMA_PARITY_EXCEED_SIZE      = 0x64
   ,NFI_ECC_DMA_BIT_MODE_UN_SUPPORTED   = 0x65
   ,NFI_ECC_DMA_NON_4BYTE_ALIGNMENT     = 0x66
   ,NFI_ECC_DMA_EXCEED_DECODE_BUFF      = 0x67
   ,NFI_ECC_DMA_MODE_UN_SUPPORTED       = 0x68
   ,NFI_ECC_DMA_DECODE_UN_SUPPORTED     = 0x69
   ,NFI_ECC_DMA_EXCEED_CAPABILITY       = 0x6A
   ,NFI_ECC_DMA_PLACE_EXCEED_AREA       = 0x6B
   ,NFI_ECC_DMA_IRQ_MODE_UN_SUPPORTED   = 0x6C
   ,NFI_ECC_DMA_DONE_TIME_OUT           = 0x6D
   ,NFI_ECC_DMA_VALUE_NULL              = 0x6E
   ,NFI_ECC_DMA_DECENUM_TIME_OUT        = 0x6F
   ,NFI_ECC_DMA_READY_TIME_OUT          = 0x70
   //--------- NFB error code ------------------------
   ,NFB_HEADER_ID_NO_FOUND              = 0xA0
   ,NFB_NO_GOOD_BLOCK                   = 0xA1
   ,NFB_BAD_BLOCK0_GOOD_BLOCK_NO_HEADER = 0xA2
   ,NFB_BL_LENGTH_EXCEED_BL_LINKADDR    = 0xA3
   ,NFB_DATA_EXCEED_HEADER_BLOCK        = 0xA4
   ,NFB_INVALID_LINKADDR                = 0xA5
   ,NFB_HEADER_READ_FAIL                = 0xA6
   ,NFB_HEADER_NO_VALID_INFO            = 0xA7
   ,NFB_HEADER_TOO_MANY_ERROR_BITS      = 0xA8
   //--------- BPTTBL error code ---------------------
   ,BPTTBL_ID_ERROR                       = 0xE0
   ,BPTTBL_NUM_ERROR                    = 0xE1
} NFI_Error_Code;


#endif /*_BROM_ERRNO_H*/

