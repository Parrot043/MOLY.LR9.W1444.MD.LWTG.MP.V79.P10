#!/usr/bin/perl -w
use strict;

my $entryNum = 128;

my $i = 0;
print "#include \"drv_mdcirq_reg.h\"\n";
print "#include \"esal_ar_isr_defs_gcc.inc\"\n";
print "#include \"esal_ar_stk_defs_gcc.inc\"\n";
print "\n";
print ".equ SVC_MODE  , 0x13         @ Supervisor Mode (SVC)\n";
print ".equ IRQ_MODE  , 0x12         @ Interrupt Mode (IRQ)\n";
print ".equ KERN_MODE , 0x1f         @ Kernel Running Mode\n";
print ".equ SYS_MODE  , 0x1f         @ Kernel Running Mode\n";
print ".data\n";
print ".extern drv_mdcirq_dispatcher\n";
print ".extern ESAL_GE_STK_System_SP\n";
print ".extern ESAL_GE_ISR_OS_Entry\n";
print ".extern ESAL_GE_ISR_OS_Nested_Entry\n";
print ".extern ESAL_GE_STK_Unsol_Switch_Req\n";
print ".extern TP_Update_Preempted_Time\n";
print ".text\n";
print ".global ISRRoutine_Default\n";
print ".global ISRRoutine_1\n";
print ".global ISRRoutine_2\n";
print ".thumb\n";
print ".section INTSRAM_ROCODE, \"ax\"\n";
print ".syntax unified\n";
print ".thumb_func\n";
print ".align 2\n";
print ".global ISRRoutines\n";
print "ISRRoutines:\n";
while($i < $entryNum){
	print "ISRRoutine_$i:\n";                  #
	print "    SUB     lr,lr,#4\n";            # 4 bytes
#	print "    ORR     lr,lr,#1\n";            # 4 bytes
	print "    SRSDB   sp!, #SYS_MODE\n";      # 4 bytes
	print "    MOV     lr, #$i\n";             # 2 bytes
	print "    B       ISRCommonRoutine\n";    # 
	print ".align 2\n";
	$i += 1;
}

print "ESAL_AR_ISR_System_SP:\n";
print "    .long ESAL_GE_STK_System_SP\n";
print "ESAL_AR_ISR_Executing:\n";
print "    .long ESAL_GE_ISR_Executing\n";
print "ESAL_AR_ISR_OS_Entry:\n";
print "    .long ESAL_GE_ISR_OS_Entry\n";
print "ESAL_AR_ISR_OS_Nested_Entry:\n";
print "    .long ESAL_GE_ISR_OS_Nested_Entry\n";
print "ESAL_AR_ISR_Unsol_Switch_Req:\n";
print "    .long ESAL_GE_STK_Unsol_Switch_Req\n";
print "NO_CONTEXT_SWITCH_LOGGING:\n";
print "    .long No_Context_Switch\n";
print "#if defined(__TP_SUPPORT_TIMING_CHECK__)\n";
print "UPDATE_PREEMPTED_TIME:\n";
print "    .long TP_Update_Preempted_Time\n";
print "#endif /* end of __TP_SUPPORT_TIMING_CHECK__ */\n";
print "ISRCommonRoutine:\n";

print "    ESAL_AR_STK_MIN_INT_SAVE\n";
print "    \n";
print "    CPSID   aif, #IRQ_MODE\n";
print "    MOV     r0, lr               @ vector ID\n";
print "    CPSID   aif, #SYS_MODE\n";
print "    MOV     r1, sp               @ preempted task SP\n";
print "    \n";
print "    @ Check if this interrupt occurred during execution of\n";
print "    @ another interrupt (nested)\n";
print "    LDR     r2,ESAL_AR_ISR_Executing\n";
print "    LDR     r2,[r2]\n";
print "    CMP     r2, #0\n";
print "    LDREQ   sp,ESAL_AR_ISR_System_SP\n";
print "    LDREQ   sp,[sp]\n";
print "    LDREQ   r2,ESAL_AR_ISR_OS_Entry\n";
print "    LDRNE   r2,ESAL_AR_ISR_OS_Nested_Entry\n";
print "    LDR     r2,[r2]\n";
print "    ADRNE   lr,ESAL_AR_ISR_Nested_IRQ_Restore\n";
print "    ADREQ   lr,ESAL_AR_ISR_NonNested_IRQ_Restore\n";
print "    ORR     lr, lr, #1\n";
print "    BX      r2\n";
print "ESAL_AR_ISR_NonNested_IRQ_Restore:\n";
print "    LDR     r2,ESAL_AR_ISR_Unsol_Switch_Req\n";
print "    LDR     r2,[r2]\n";
print "    CMP     r2,#0\n";
print "    @ Perform context switch if required\n";
print "    BNE     ESAL_AR_STK_Unsolicited_Switch\n";
print "    @ No context switch required, restore minimal context and\n";
print "    @ return to point of interrupt\n";
print "    \n";
print "    @ Get system stack pointer in r0\n";
print "    LDR     r0,[r0]\n";
print "    \n";
print "    @ Save the r0 to the stack\n";
print "    PUSH    {r0}\n";
print "    LDR     r0,NO_CONTEXT_SWITCH_LOGGING\n";
print "    BLX     r0\n";
print "    \n";
print "#if defined(__TP_SUPPORT_TIMING_CHECK__)\n";
print "    LDR     r1, UPDATE_PREEMPTED_TIME\n";
print "    BLX     r1\n";
print "    \n";
print "#endif /* end of __TP_SUPPORT_TIMING_CHECK__ */\n";
print "    @ Restore r0 from the stack\n";
print "    POP     {r0}\n";
print "    \n";
print "    @ Restore minimum registers from stack and return from interrupt\n";
print "    ESAL_AR_STK_MIN_INT_RESTORE\n";
print "    \n";
print "ESAL_AR_ISR_Nested_IRQ_Restore:\n";
print "    @ Put the stack pointer in r0\n";
print "    MOV   r0,sp\n";
print "    \n";
print "    @ Restore minimum registers from stack and return from interrupt\n";
print "    ESAL_AR_STK_MIN_INT_RESTORE\n";
print "    \n";
print "\n";
print ".thumb\n";
print ".text\n";
print ".syntax unified\n";
print ".thumb_func\n";
print ".align 2\n";
print "ESAL_AR_ISR_System_SP_Spurious:\n";
print "    .long ESAL_GE_STK_System_SP\n";
print "ESAL_AR_ISR_Executing_Spurious:\n";
print "    .long ESAL_GE_ISR_Executing\n";
print "ESAL_AR_ISR_OS_Entry_Spurious:\n";
print "    .long ESAL_GE_ISR_OS_Entry\n";
print "ESAL_AR_ISR_OS_Nested_Entry_Spurious:\n";
print "    .long ESAL_GE_ISR_OS_Nested_Entry\n";
print "ESAL_AR_ISR_Unsol_Switch_Req_Spurious:\n";
print "    .long ESAL_GE_STK_Unsol_Switch_Req\n";
print "NO_CONTEXT_SWITCH_LOGGING_Spurious:\n";
print "    .long No_Context_Switch\n";
print "#if defined(__TP_SUPPORT_TIMING_CHECK__)\n";
print "UPDATE_PREEMPTED_TIME_Spurious:\n";
print "    .long TP_Update_Preempted_Time\n";
print "#endif /* end of __TP_SUPPORT_TIMING_CHECK__ */\n";
print "ESAL_AR_STK_Unsolicited_Switch_Spurious:\n";
print "    .long ESAL_AR_STK_Unsolicited_Switch\n";
print "\n";
print "ISRRoutine_Default:\n";
print "    SUB     lr,lr,#4\n";
print "    SRSDB   sp!, #SYS_MODE\n";
print "    ESAL_AR_STK_MIN_INT_SAVE\n";
print "    MOV     r1, sp               @ preempted task SP\n";

#get spurious interrupt ID here
print "    LDR     r2,=MDCIRQ_INTID_SPUR\n";
print "    LDR     r0,[r2]                    \n";

print "    @ Check if this interrupt occurred during execution of\n";
print "    @ another interrupt (nested)\n";
print "    LDR     r2,ESAL_AR_ISR_Executing_Spurious\n";
print "    LDR     r2,[r2]\n";
print "    CMP     r2, #0\n";
print "    LDREQ   sp,ESAL_AR_ISR_System_SP_Spurious\n";
print "    LDREQ   sp,[sp]\n";
print "    LDREQ   r2,ESAL_AR_ISR_OS_Entry_Spurious\n";
print "    LDRNE   r2,ESAL_AR_ISR_OS_Nested_Entry_Spurious\n";
print "    LDR     r2,[r2]\n";
print "    ADRNE   lr,ESAL_AR_ISR_Nested_IRQ_Restore_Spurious\n";
print "    ADREQ   lr,ESAL_AR_ISR_NonNested_IRQ_Restore_Spurious\n";
print "    ORR     lr, lr, #1\n";
print "    BX      r2\n";
print "ESAL_AR_ISR_NonNested_IRQ_Restore_Spurious:\n";
print "    LDR     r2,ESAL_AR_ISR_Unsol_Switch_Req_Spurious\n";
print "    LDR     r2,[r2]\n";
print "    CMP     r2,#0\n";
print "    @ Perform context switch if required\n";
print "    LDRNE   r3,ESAL_AR_STK_Unsolicited_Switch_Spurious\n";
print "    BXNE    r3\n";
print "    @ No context switch required, restore minimal context and\n";
print "    @ return to point of interrupt\n";
print "    \n";
print "    @ Get system stack pointer in r0\n";
print "    LDR     r0,[r0]\n";
print "    \n";
print "    @ Save the r0 to the stack\n";
print "    PUSH    {r0}\n";
print "    LDR     r0, NO_CONTEXT_SWITCH_LOGGING_Spurious\n";
print "    BLX     r0\n";
print "    \n";
print "#if defined(__TP_SUPPORT_TIMING_CHECK__)\n";
print "    LDR     r1, UPDATE_PREEMPTED_TIME_Spurious\n";
print "    BLX     r1\n";
print "    \n";
print "#endif /* end of __TP_SUPPORT_TIMING_CHECK__ */\n";
print "    @ Restore r0 from the stack\n";
print "    POP     {r0}\n";
print "    \n";
print "    @ Restore minimum registers from stack and return from interrupt\n";
print "    ESAL_AR_STK_MIN_INT_RESTORE\n";
print "    \n";
print "ESAL_AR_ISR_Nested_IRQ_Restore_Spurious:\n";
print "    @ Put the stack pointer in r0\n";
print "    MOV   r0,sp\n";
print "    \n";
print "    @ Restore minimum registers from stack and return from interrupt\n";
print "    ESAL_AR_STK_MIN_INT_RESTORE\n";
print "\n";
print "\n";
print ".end\n";
print "\n";
