/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2013
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/

/*******************************************************************************
 * Filename:
 * ---------
 *   drv_arm7cirq_reg.h
 *
 * Project:
 * --------
 *   Moly
 *
 * Description:
 * ------------
 *   Low level interrupt controller driver
 *
 * Author:
 * -------
 * -------
 *
 * ==========================================================================
 * $Log$
 ****************************************************************************/

#ifndef __DRV_ARM7CIRQ_REG_H__
#define __DRV_ARM7CIRQ_REG_H__
#include "kal_public_api.h"
#include "isrentry.h"
#include "reg_base.h"

/* Global ARM7CIRQ Definition  */
#define MAX_ISR_NUM                   (32U)
#define ARM7CIRQ_LOWEST_PRI           (0xFU)
#define ARM7CIRQ_HIGHEST_PRI          (0x0U)
#define ARM7CIRQ_TOTAL_PRI_LEVEL      (16U)   /* 16 Priority Level */
#define ARM7CIRQ_TOTAL_PRI_LEVEL_MASK (0xFU)  /* Priority Level Mask */

#define ARM7CIRQ_BASE            (BASE_ADDR_ARM7CIRQ)
#define ARM7CIRQ_ISAR3100_REG    (ARM7CIRQ_BASE + 0x0000)
#define ARM7CIRQ_IMKR3100_REG    (ARM7CIRQ_BASE + 0x0004)
#define ARM7CIRQ_IMCR3100_REG    (ARM7CIRQ_BASE + 0x0008)
#define ARM7CIRQ_IMSR3100_REG    (ARM7CIRQ_BASE + 0x000C)
#define ARM7CIRQ_ISTR3100_REG    (ARM7CIRQ_BASE + 0x0010)
#define ARM7CIRQ_ISENR3100_REG   (ARM7CIRQ_BASE + 0x0014)
#define ARM7CIRQ_FIQCONR_REG     (ARM7CIRQ_BASE + 0x0018)
#define ARM7CIRQ_IVCTR3100_REG   (ARM7CIRQ_BASE + 0x001C)
#define ARM7CIRQ_INTID_CURR_REG  (ARM7CIRQ_BASE + 0x0020)
#define ARM7CIRQ_PRLV_CURR_REG   (ARM7CIRQ_BASE + 0x0024)

#define ARM7CIRQ_INTID_BEST_REG  (ARM7CIRQ_BASE + 0x0028)
#define ARM7CIRQ_PRLV_BEST_REG   (ARM7CIRQ_BASE + 0x002C)
#define ARM7CIRQ_INTID_SPUR_REG  (ARM7CIRQ_BASE + 0x0030)

#define ARM7CIRQ_CTRL_REG        (ARM7CIRQ_BASE + 0x0034)
#define ARM7CIRQ_DBG_REG         (ARM7CIRQ_BASE + 0x0038)
#define ARM7CIRQ_SW_PRIACK_REG   (ARM7CIRQ_BASE + 0x003C)
#define ARM7CIRQ_MIN_PRLV_REG    (ARM7CIRQ_BASE + 0x0040)

#define ARM7CIRQ_PRLV_BASE       (ARM7CIRQ_BASE + 0x0044)
#define ARM7CIRQ_PRLV_REG(n)     (ARM7CIRQ_PRLV_BASE + (n)*4 )

/* ARM7CIRQ_FIQCONR Field */
#define ARM7CIRQ_FIQCONR_FIQ_MASK     (1UL << 0)
#define ARM7CIRQ_FIQCONR_FIQ_SEL(n)   ((n) << 8) /* n = 0 ~ MAX_ISR_NUM-1 */

/* ARM7CIRQ_CTRL_REG Field */
#define ARM7CIRQ_CTRL_REG_NESTED_INT_EN      (1UL << 0)

#define ARM7CIRQ_SEN_PULSE            (KAL_TRUE)
#define ARM7CIRQ_SEN_LEVEL            (KAL_FALSE)

#define ARM7CIRQ_SETMASK_BIT(v)        DRV_WriteReg32( ARM7CIRQ_IMSR3100_REG, (0x1 << v))
#define ARM7CIRQ_CLRMASK_BIT(v)        DRV_WriteReg32( ARM7CIRQ_IMCR3100_REG, (0x1 << v))

#endif /* end of __DRV_ARM7CIRQ_REG_H__ */

